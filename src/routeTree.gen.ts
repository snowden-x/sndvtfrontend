/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedLibraryRouteImport } from './routes/_authenticated/library'
import { Route as AuthenticatedDebugRouteImport } from './routes/_authenticated/debug'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedNetworkRouteRouteImport } from './routes/_authenticated/network/route'
import { Route as AuthenticatedAlertsRouteRouteImport } from './routes/_authenticated/alerts/route'
import { Route as AuthenticatedAlertsIndexRouteImport } from './routes/_authenticated/alerts/index'
import { Route as AuthenticatedNetworkRagChatRouteImport } from './routes/_authenticated/network/rag-chat'
import { Route as AuthenticatedNetworkDevicesRouteImport } from './routes/_authenticated/network/devices'
import { Route as AuthenticatedAlertsAlertIdRouteImport } from './routes/_authenticated/alerts/$alertId'
import { Route as AuthenticatedAdminUsersRouteImport } from './routes/_authenticated/admin/users'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedLibraryRoute = AuthenticatedLibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDebugRoute = AuthenticatedDebugRouteImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedNetworkRouteRoute =
  AuthenticatedNetworkRouteRouteImport.update({
    id: '/network',
    path: '/network',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedAlertsRouteRoute =
  AuthenticatedAlertsRouteRouteImport.update({
    id: '/alerts',
    path: '/alerts',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedAlertsIndexRoute =
  AuthenticatedAlertsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedAlertsRouteRoute,
  } as any)
const AuthenticatedNetworkRagChatRoute =
  AuthenticatedNetworkRagChatRouteImport.update({
    id: '/rag-chat',
    path: '/rag-chat',
    getParentRoute: () => AuthenticatedNetworkRouteRoute,
  } as any)
const AuthenticatedNetworkDevicesRoute =
  AuthenticatedNetworkDevicesRouteImport.update({
    id: '/devices',
    path: '/devices',
    getParentRoute: () => AuthenticatedNetworkRouteRoute,
  } as any)
const AuthenticatedAlertsAlertIdRoute =
  AuthenticatedAlertsAlertIdRouteImport.update({
    id: '/$alertId',
    path: '/$alertId',
    getParentRoute: () => AuthenticatedAlertsRouteRoute,
  } as any)
const AuthenticatedAdminUsersRoute = AuthenticatedAdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/alerts': typeof AuthenticatedAlertsRouteRouteWithChildren
  '/network': typeof AuthenticatedNetworkRouteRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/debug': typeof AuthenticatedDebugRoute
  '/library': typeof AuthenticatedLibraryRoute
  '/admin/users': typeof AuthenticatedAdminUsersRoute
  '/alerts/$alertId': typeof AuthenticatedAlertsAlertIdRoute
  '/network/devices': typeof AuthenticatedNetworkDevicesRoute
  '/network/rag-chat': typeof AuthenticatedNetworkRagChatRoute
  '/alerts/': typeof AuthenticatedAlertsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/network': typeof AuthenticatedNetworkRouteRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/debug': typeof AuthenticatedDebugRoute
  '/library': typeof AuthenticatedLibraryRoute
  '/admin/users': typeof AuthenticatedAdminUsersRoute
  '/alerts/$alertId': typeof AuthenticatedAlertsAlertIdRoute
  '/network/devices': typeof AuthenticatedNetworkDevicesRoute
  '/network/rag-chat': typeof AuthenticatedNetworkRagChatRoute
  '/alerts': typeof AuthenticatedAlertsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/alerts': typeof AuthenticatedAlertsRouteRouteWithChildren
  '/_authenticated/network': typeof AuthenticatedNetworkRouteRouteWithChildren
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/debug': typeof AuthenticatedDebugRoute
  '/_authenticated/library': typeof AuthenticatedLibraryRoute
  '/_authenticated/admin/users': typeof AuthenticatedAdminUsersRoute
  '/_authenticated/alerts/$alertId': typeof AuthenticatedAlertsAlertIdRoute
  '/_authenticated/network/devices': typeof AuthenticatedNetworkDevicesRoute
  '/_authenticated/network/rag-chat': typeof AuthenticatedNetworkRagChatRoute
  '/_authenticated/alerts/': typeof AuthenticatedAlertsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/alerts'
    | '/network'
    | '/dashboard'
    | '/debug'
    | '/library'
    | '/admin/users'
    | '/alerts/$alertId'
    | '/network/devices'
    | '/network/rag-chat'
    | '/alerts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/network'
    | '/dashboard'
    | '/debug'
    | '/library'
    | '/admin/users'
    | '/alerts/$alertId'
    | '/network/devices'
    | '/network/rag-chat'
    | '/alerts'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/alerts'
    | '/_authenticated/network'
    | '/_authenticated/dashboard'
    | '/_authenticated/debug'
    | '/_authenticated/library'
    | '/_authenticated/admin/users'
    | '/_authenticated/alerts/$alertId'
    | '/_authenticated/network/devices'
    | '/_authenticated/network/rag-chat'
    | '/_authenticated/alerts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/library': {
      id: '/_authenticated/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof AuthenticatedLibraryRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/debug': {
      id: '/_authenticated/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof AuthenticatedDebugRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/network': {
      id: '/_authenticated/network'
      path: '/network'
      fullPath: '/network'
      preLoaderRoute: typeof AuthenticatedNetworkRouteRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/alerts': {
      id: '/_authenticated/alerts'
      path: '/alerts'
      fullPath: '/alerts'
      preLoaderRoute: typeof AuthenticatedAlertsRouteRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/alerts/': {
      id: '/_authenticated/alerts/'
      path: '/'
      fullPath: '/alerts/'
      preLoaderRoute: typeof AuthenticatedAlertsIndexRouteImport
      parentRoute: typeof AuthenticatedAlertsRouteRoute
    }
    '/_authenticated/network/rag-chat': {
      id: '/_authenticated/network/rag-chat'
      path: '/rag-chat'
      fullPath: '/network/rag-chat'
      preLoaderRoute: typeof AuthenticatedNetworkRagChatRouteImport
      parentRoute: typeof AuthenticatedNetworkRouteRoute
    }
    '/_authenticated/network/devices': {
      id: '/_authenticated/network/devices'
      path: '/devices'
      fullPath: '/network/devices'
      preLoaderRoute: typeof AuthenticatedNetworkDevicesRouteImport
      parentRoute: typeof AuthenticatedNetworkRouteRoute
    }
    '/_authenticated/alerts/$alertId': {
      id: '/_authenticated/alerts/$alertId'
      path: '/$alertId'
      fullPath: '/alerts/$alertId'
      preLoaderRoute: typeof AuthenticatedAlertsAlertIdRouteImport
      parentRoute: typeof AuthenticatedAlertsRouteRoute
    }
    '/_authenticated/admin/users': {
      id: '/_authenticated/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AuthenticatedAdminUsersRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedAlertsRouteRouteChildren {
  AuthenticatedAlertsAlertIdRoute: typeof AuthenticatedAlertsAlertIdRoute
  AuthenticatedAlertsIndexRoute: typeof AuthenticatedAlertsIndexRoute
}

const AuthenticatedAlertsRouteRouteChildren: AuthenticatedAlertsRouteRouteChildren =
  {
    AuthenticatedAlertsAlertIdRoute: AuthenticatedAlertsAlertIdRoute,
    AuthenticatedAlertsIndexRoute: AuthenticatedAlertsIndexRoute,
  }

const AuthenticatedAlertsRouteRouteWithChildren =
  AuthenticatedAlertsRouteRoute._addFileChildren(
    AuthenticatedAlertsRouteRouteChildren,
  )

interface AuthenticatedNetworkRouteRouteChildren {
  AuthenticatedNetworkDevicesRoute: typeof AuthenticatedNetworkDevicesRoute
  AuthenticatedNetworkRagChatRoute: typeof AuthenticatedNetworkRagChatRoute
}

const AuthenticatedNetworkRouteRouteChildren: AuthenticatedNetworkRouteRouteChildren =
  {
    AuthenticatedNetworkDevicesRoute: AuthenticatedNetworkDevicesRoute,
    AuthenticatedNetworkRagChatRoute: AuthenticatedNetworkRagChatRoute,
  }

const AuthenticatedNetworkRouteRouteWithChildren =
  AuthenticatedNetworkRouteRoute._addFileChildren(
    AuthenticatedNetworkRouteRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedAlertsRouteRoute: typeof AuthenticatedAlertsRouteRouteWithChildren
  AuthenticatedNetworkRouteRoute: typeof AuthenticatedNetworkRouteRouteWithChildren
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedDebugRoute: typeof AuthenticatedDebugRoute
  AuthenticatedLibraryRoute: typeof AuthenticatedLibraryRoute
  AuthenticatedAdminUsersRoute: typeof AuthenticatedAdminUsersRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAlertsRouteRoute: AuthenticatedAlertsRouteRouteWithChildren,
  AuthenticatedNetworkRouteRoute: AuthenticatedNetworkRouteRouteWithChildren,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedDebugRoute: AuthenticatedDebugRoute,
  AuthenticatedLibraryRoute: AuthenticatedLibraryRoute,
  AuthenticatedAdminUsersRoute: AuthenticatedAdminUsersRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
