/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DevicesIndexRouteImport } from './routes/devices/index'
import { Route as ChatIndexRouteImport } from './routes/chat/index'
import { Route as DevicesNewRouteImport } from './routes/devices/new'
import { Route as DevicesDeviceIdRouteImport } from './routes/devices/$deviceId'
import { Route as DevicesDeviceIdEditRouteImport } from './routes/devices/$deviceId.edit'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DevicesIndexRoute = DevicesIndexRouteImport.update({
  id: '/devices/',
  path: '/devices/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatIndexRoute = ChatIndexRouteImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRouteImport,
} as any)
const DevicesNewRoute = DevicesNewRouteImport.update({
  id: '/devices/new',
  path: '/devices/new',
  getParentRoute: () => rootRouteImport,
} as any)
const DevicesDeviceIdRoute = DevicesDeviceIdRouteImport.update({
  id: '/devices/$deviceId',
  path: '/devices/$deviceId',
  getParentRoute: () => rootRouteImport,
} as any)
const DevicesDeviceIdEditRoute = DevicesDeviceIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => DevicesDeviceIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRouteWithChildren
  '/devices/new': typeof DevicesNewRoute
  '/chat': typeof ChatIndexRoute
  '/devices': typeof DevicesIndexRoute
  '/devices/$deviceId/edit': typeof DevicesDeviceIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRouteWithChildren
  '/devices/new': typeof DevicesNewRoute
  '/chat': typeof ChatIndexRoute
  '/devices': typeof DevicesIndexRoute
  '/devices/$deviceId/edit': typeof DevicesDeviceIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRouteWithChildren
  '/devices/new': typeof DevicesNewRoute
  '/chat/': typeof ChatIndexRoute
  '/devices/': typeof DevicesIndexRoute
  '/devices/$deviceId/edit': typeof DevicesDeviceIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/devices/$deviceId'
    | '/devices/new'
    | '/chat'
    | '/devices'
    | '/devices/$deviceId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/devices/$deviceId'
    | '/devices/new'
    | '/chat'
    | '/devices'
    | '/devices/$deviceId/edit'
  id:
    | '__root__'
    | '/'
    | '/devices/$deviceId'
    | '/devices/new'
    | '/chat/'
    | '/devices/'
    | '/devices/$deviceId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DevicesDeviceIdRoute: typeof DevicesDeviceIdRouteWithChildren
  DevicesNewRoute: typeof DevicesNewRoute
  ChatIndexRoute: typeof ChatIndexRoute
  DevicesIndexRoute: typeof DevicesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/devices/': {
      id: '/devices/'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/devices/new': {
      id: '/devices/new'
      path: '/devices/new'
      fullPath: '/devices/new'
      preLoaderRoute: typeof DevicesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/devices/$deviceId': {
      id: '/devices/$deviceId'
      path: '/devices/$deviceId'
      fullPath: '/devices/$deviceId'
      preLoaderRoute: typeof DevicesDeviceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/devices/$deviceId/edit': {
      id: '/devices/$deviceId/edit'
      path: '/edit'
      fullPath: '/devices/$deviceId/edit'
      preLoaderRoute: typeof DevicesDeviceIdEditRouteImport
      parentRoute: typeof DevicesDeviceIdRoute
    }
  }
}

interface DevicesDeviceIdRouteChildren {
  DevicesDeviceIdEditRoute: typeof DevicesDeviceIdEditRoute
}

const DevicesDeviceIdRouteChildren: DevicesDeviceIdRouteChildren = {
  DevicesDeviceIdEditRoute: DevicesDeviceIdEditRoute,
}

const DevicesDeviceIdRouteWithChildren = DevicesDeviceIdRoute._addFileChildren(
  DevicesDeviceIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DevicesDeviceIdRoute: DevicesDeviceIdRouteWithChildren,
  DevicesNewRoute: DevicesNewRoute,
  ChatIndexRoute: ChatIndexRoute,
  DevicesIndexRoute: DevicesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
